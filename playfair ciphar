#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void removeDuplicates(char *str) {
 int length = strlen(str);
 for (int i = 0; i < length; i++) {
 for (int j = i + 1; j < length; j++) {
 if (str[i] == str[j]) {
 for (int k = j; k < length; k++) {
 str[k] = str[k + 1];
 }
length--;
 j--;
 }
 }
 }
}
void createMatrix(char *key, char matrix[SIZE][SIZE]) {
 int k = 0;
 int used[26] = {0};
 for (int i = 0; key[i] != '\0'; i++) {
 char c = toupper(key[i]);
 if (c >= 'A' && c <= 'Z' && !used[c - 'A']) {
 matrix[k / SIZE][k % SIZE] = c;
 used[c - 'A'] = 1;
 k++;
 }
 }
 for (char c = 'A'; c <= 'Z'; c++) {
 if (c != 'J' && !used[c - 'A']) {
 matrix[k / SIZE][k % SIZE] = c;
 k++;
 }
}
}
void preprocessPlaintext(char *text, char *processedText) {
 int k = 0;
 for (int i = 0; text[i] != '\0'; i++) {
 if (isalpha(text[i])) {
 processedText[k++] = toupper(text[i]);
 }
 }
 for (int i = 0; i < k - 1; i += 2) {
 if (processedText[i] == processedText[i + 1]) {
 for (int j = k; j > i + 1; j--) {
 processedText[j] = processedText[j - 1];
 }
processedText[i + 1] = 'X';
 k++;
 }
 }
 if (k % 2 != 0) {
 processedText[k++] = 'X';
 }
 processedText[k] = '\0';
}
void findPosition(char c, char matrix[SIZE][SIZE], int *row, int *col) {
 for (int i = 0; i < SIZE; i++) {
 for (int j = 0; j < SIZE; j++) {
 if (matrix[i][j] == c) {
 *row = i;
 *col = j;
 return;
 }
 }
 }
}
void encryptPlayfair(char *text, char matrix[SIZE][SIZE], char *ciphertext) {
 int k = 0;
for (int i = 0; text[i] != '\0'; i += 2) {
 int row1, col1, row2, col2;
 findPosition(text[i], matrix, &row1, &col1);
 findPosition(text[i + 1], matrix, &row2, &col2);
 if (row1 == row2) {
 ciphertext[k++] = matrix[row1][(col1 + 1) % SIZE];
 ciphertext[k++] = matrix[row2][(col2 + 1) % SIZE];
 } else if (col1 == col2) {
 ciphertext[k++] = matrix[(row1 + 1) % SIZE][col1];
 ciphertext[k++] = matrix[(row2 + 1) % SIZE][col2];
 } else {
 ciphertext[k++] = matrix[row1][col2];
 ciphertext[k++] = matrix[row2][col1];
}
 }
 ciphertext[k] = '\0';
}
int main() {
 char key[100], plaintext[100], processedText[200], ciphertext[200];
 char matrix[SIZE][SIZE];
 printf("Enter the keyword: ");
 fgets(key, sizeof(key), stdin);
 key[strcspn(key, "\n")] = '\0';
 printf("Enter the plaintext: ");
 fgets(plaintext, sizeof(plaintext), stdin);
 plaintext[strcspn(plaintext, "\n")] = '\0';
 removeDuplicates(key);
 createMatrix(key, matrix);
 preprocessPlaintext(plaintext, processedText);
 encryptPlayfair(processedText, matrix, ciphertext);
printf("Encrypted message: %s\n", ciphertext);
 return 0;
}
